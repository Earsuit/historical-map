name: C/C++ CI

on:
  push:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 2.4.1
    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"
    - name: Create default Conan profile
      run: conan profile detect --force
    - name: Conan install dependencies
      run: conan install . --build=missing -s build_type=Release -s:a=compiler.cppstd=gnu20 -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True
    - name: "run cmake"
      run: cmake --preset conan-release
    - name: "run make" 
      run: cmake --build . -j
      working-directory:
        build/Release
    - name: generation translation mo file
      run: cmake --build . -j --target translation
      working-directory:
        build/Release
    - name: "Upload artifact"
      uses: actions/upload-artifact@v4
      with:
        name: linux-build-artifact
        path: build/

  build-macos:
    runs-on: macos-13 # macos 14 conan install fail

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: "install brew"
      run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    - name: "install compiler"
      run: brew install llvm@17
    - name: "set env var"
      run: |
        echo "CC=$(brew --prefix llvm@17)/bin/clang" >> "$GITHUB_ENV"
        echo "CXX=$(brew --prefix llvm@17)/bin/clang++" >> "$GITHUB_ENV"
    - name: install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 2.4.1
    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"
    - name: Create default Conan profile
      run: conan profile detect --force
    - name: Conan install dependencies
      run: conan install . --build=missing -s build_type=Release -s:a=compiler.cppstd=gnu20
    - name: run cmake
      run: cmake --preset conan-release
    - name: run make
      run: cmake --build . -j
      working-directory:
        build/Release
    - name: generation translation mo file
      run: cmake --build . -j --target translation
      working-directory:
        build/Release
    - name: "Upload artifact"
      uses: actions/upload-artifact@v4
      with:
        name: macos-build-artifact
        path: build/

  build-win:
    runs-on: windows-latest

    steps:
    - uses: lukka/get-cmake@v3.29.1
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 2.4.1
    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"
    - name: Create default Conan profile
      run: conan profile detect --force
    - name: Conan install dependencies
      run: conan install . --build=missing -s build_type=Release -s:a=compiler.cppstd=20
    - name: run cmake
      run: cmake --preset conan-default
    - name: run make
      run: cmake --build . -j --config Release
      working-directory:
        build/
    - name: generation translation mo file
      run: cmake --build . -j --config Release --target translation
      working-directory:
        build/
    - name: "Upload artifact"
      uses: actions/upload-artifact@v4
      with:
        name: win-build-artifact
        path: build/

  test-linux:
    needs: build-linux

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: "Download artifact"
      uses: actions/download-artifact@v4
      with:
        name: linux-build-artifact
        path: build
    - name: "test"
      run: |
        chmod -R a+x test/*
        ctest --output-on-failure
      working-directory:
        build/Release

  test-macos:
    needs: build-macos

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4
    - name: "Download artifact"
      uses: actions/download-artifact@v4
      with:
        name: macos-build-artifact
        path: build
    - name: "test"
      run: |
        chmod -R a+x test/*
        ctest --output-on-failure
      working-directory:
        build/Release

  test-win:
    needs: build-win

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: "Download artifact"
      uses: actions/download-artifact@v4
      with:
        name: win-build-artifact
        path: build
    - name: "test"
      run: |
        chmod -R a+x test/*
        ctest --output-on-failure
      working-directory:
        build/  
